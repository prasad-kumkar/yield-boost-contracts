{
  "address": "0x744672C0ed3Ed30399f0499723f2D502Ebc57861",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senderBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recipientBalance",
          "type": "uint256"
        }
      ],
      "name": "CancelStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "CreateStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundsAdmin",
          "type": "address"
        }
      ],
      "name": "NewFundsAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromStream",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_MOCK_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "deltaOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundsAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundsAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6eeacc1da4e806fa7703db447d635eae023e259356c83b9282c6a87c7ae854e6",
  "receipt": {
    "to": null,
    "from": "0xc98F11DAAAC76D3ef368fDF54fbbA34FfD951976",
    "contractAddress": "0x744672C0ed3Ed30399f0499723f2D502Ebc57861",
    "transactionIndex": 1,
    "gasUsed": "10009274",
    "logsBloom": "0x
    "blockHash": "0xa3694d8e9e25dc2d849c59f266c896e4bfbc8d9309b33ad4696f245466beba18",
    "transactionHash": "0x6eeacc1da4e806fa7703db447d635eae023e259356c83b9282c6a87c7ae854e6",
    "logs": [],
    "blockNumber": 130118313,
    "cumulativeGasUsed": "10009274",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a9b9167f21b1718d762bb9f96284ee21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundsAdmin\",\"type\":\"address\"}],\"name\":\"NewFundsAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_MOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundsAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundsAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BGD Labs*\",\"events\":{\"NewFundsAdmin(address)\":{\"params\":{\"fundsAdmin\":\"The new funds admin*\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,address,uint256)\":{\"details\":\"Function for the funds admin to give ERC20 allowance to other parties\",\"params\":{\"amount\":\"Allowance to approve*\",\"recipient\":\"Allowance's recipient\",\"token\":\"The address of the token to give allowance from\"}},\"balanceOf(uint256,address)\":{\"details\":\"Throws if the id does not point to a valid stream.\",\"params\":{\"streamId\":\"The id of the stream for which to query the balance.\",\"who\":\"The address for which to query the balance.\"}},\"cancelStream(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if there is a token transfer failure.\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"}},\"createStream(address,uint256,address,uint256,uint256)\":{\"details\":\"Throws if the recipient is the zero address, the contract itself or the caller.  Throws if the deposit is 0.  Throws if the start time is before `block.timestamp`.  Throws if the stop time is before the start time.  Throws if the duration calculation has a math error.  Throws if the deposit is smaller than the duration.  Throws if the deposit is not a multiple of the duration.  Throws if the rate calculation has a math error.  Throws if the next stream id calculation has a math error.  Throws if the contract is not allowed to transfer enough tokens.  Throws if there is a token transfer failure.\",\"params\":{\"deposit\":\"The amount of money to be streamed.\",\"recipient\":\"The address towards which the money is streamed.\",\"startTime\":\"The unix timestamp for when the stream starts.\",\"stopTime\":\"The unix timestamp for when the stream stops.\",\"tokenAddress\":\"The ERC20 token to use as streaming currency.\"}},\"deltaOf(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.\",\"params\":{\"streamId\":\"The id of the stream for which to query the delta.\"}},\"getFundsAdmin()\":{\"returns\":{\"_0\":\"address The address of the funds admin*\"}},\"getStream(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.\",\"params\":{\"streamId\":\"The id of the stream to query.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to transfer*\",\"recipient\":\"Transfer's recipient\",\"token\":\"The address of the token to transfer\"}},\"withdrawFromStream(uint256,uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if the amount exceeds the available balance.  Throws if there is a token transfer failure.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"streamId\":\"The id of the stream to withdraw tokens from.\"}}},\"title\":\"AaveEcosystemReserve v2\",\"version\":1},\"userdoc\":{\"events\":{\"NewFundsAdmin(address)\":{\"notice\":\"Emitted when the funds admin changes\"}},\"kind\":\"user\",\"methods\":{\"ETH_MOCK_ADDRESS()\":{\"notice\":\"Returns the mock ETH reference address\"},\"balanceOf(uint256,address)\":{\"notice\":\"Returns the available funds for the given stream id and address.Returns the total funds allocated to `who` as uint256.\"},\"cancelStream(uint256)\":{\"notice\":\"Cancels the stream and transfers the tokens back on a pro rata basis.Returns bool true=success, otherwise false.\"},\"createStream(address,uint256,address,uint256,uint256)\":{\"notice\":\"Creates a new stream funded by this contracts itself and paid towards `recipient`.Returns the uint256 id of the newly created stream.\"},\"deltaOf(uint256)\":{\"notice\":\"Returns either the delta in seconds between `block.timestamp` and `startTime` or  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before  `startTime`, it returns 0.Returns the time delta in seconds.\"},\"getFundsAdmin()\":{\"notice\":\"Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\"},\"getNextStreamId()\":{\"notice\":\"Returns the next available stream idReturns the stream id.\"},\"getStream(uint256)\":{\"notice\":\"Returns the stream with all its properties.Returns the stream object.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Function for the funds admin to transfer ERC20 tokens to other parties\"},\"withdrawFromStream(uint256,uint256)\":{\"notice\":\"Withdraws from the contract to the recipient's account.\"}},\"notice\":\"Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities. Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888 Modifications: - Sablier \\\"pulls\\\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds. - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol\":\"AaveEcosystemReserveV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/lend/aave-core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf57d62241e553696a1324d225663ba2e1a51db0a51ca236d0c1b009d89b6284c\",\"license\":\"AGPL-3.0\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from '../../../aave-core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IStreamable} from './interfaces/IStreamable.sol';\\nimport {AdminControlledEcosystemReserve} from './AdminControlledEcosystemReserve.sol';\\nimport {ReentrancyGuard} from './libs/ReentrancyGuard.sol';\\nimport {SafeERC20} from './libs/SafeERC20.sol';\\n\\n/**\\n * @title AaveEcosystemReserve v2\\n * @notice Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities.\\n * Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol\\n * Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888\\n * Modifications:\\n * - Sablier \\\"pulls\\\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds.\\n * - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can\\n * - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math\\n * - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient\\n * @author BGD Labs\\n **/\\ncontract AaveEcosystemReserveV2 is AdminControlledEcosystemReserve, ReentrancyGuard, IStreamable {\\n  using SafeERC20 for IERC20;\\n\\n  /*** Storage Properties ***/\\n\\n  /**\\n   * @notice Counter for new stream ids.\\n   */\\n  uint256 private _nextStreamId;\\n\\n  /**\\n   * @notice The stream objects identifiable by their unsigned integer ids.\\n   */\\n  mapping(uint256 => Stream) private _streams;\\n\\n  /*** Modifiers ***/\\n\\n  /**\\n   * @dev Throws if the caller is not the funds admin of the recipient of the stream.\\n   */\\n  modifier onlyAdminOrRecipient(uint256 streamId) {\\n    require(\\n      msg.sender == _fundsAdmin || msg.sender == _streams[streamId].recipient,\\n      'caller is not the funds admin or the recipient of the stream'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if the provided id does not point to a valid stream.\\n   */\\n  modifier streamExists(uint256 streamId) {\\n    require(_streams[streamId].isEntity, 'stream does not exist');\\n    _;\\n  }\\n\\n  /*** Contract Logic Starts Here */\\n\\n  function initialize(address fundsAdmin) external initializer {\\n    _nextStreamId = 100000;\\n    _setFundsAdmin(fundsAdmin);\\n  }\\n\\n  /*** View Functions ***/\\n\\n  /**\\n   * @notice Returns the next available stream id\\n   * @notice Returns the stream id.\\n   */\\n  function getNextStreamId() external view returns (uint256) {\\n    return _nextStreamId;\\n  }\\n\\n  /**\\n   * @notice Returns the stream with all its properties.\\n   * @dev Throws if the id does not point to a valid stream.\\n   * @param streamId The id of the stream to query.\\n   * @notice Returns the stream object.\\n   */\\n  function getStream(uint256 streamId)\\n    external\\n    view\\n    streamExists(streamId)\\n    returns (\\n      address sender,\\n      address recipient,\\n      uint256 deposit,\\n      address tokenAddress,\\n      uint256 startTime,\\n      uint256 stopTime,\\n      uint256 remainingBalance,\\n      uint256 ratePerSecond\\n    )\\n  {\\n    sender = _streams[streamId].sender;\\n    recipient = _streams[streamId].recipient;\\n    deposit = _streams[streamId].deposit;\\n    tokenAddress = _streams[streamId].tokenAddress;\\n    startTime = _streams[streamId].startTime;\\n    stopTime = _streams[streamId].stopTime;\\n    remainingBalance = _streams[streamId].remainingBalance;\\n    ratePerSecond = _streams[streamId].ratePerSecond;\\n  }\\n\\n  /**\\n   * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\\n   *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\n   *  `startTime`, it returns 0.\\n   * @dev Throws if the id does not point to a valid stream.\\n   * @param streamId The id of the stream for which to query the delta.\\n   * @notice Returns the time delta in seconds.\\n   */\\n  function deltaOf(uint256 streamId) public view streamExists(streamId) returns (uint256 delta) {\\n    Stream memory stream = _streams[streamId];\\n    if (block.timestamp <= stream.startTime) return 0;\\n    if (block.timestamp < stream.stopTime) return block.timestamp - stream.startTime;\\n    return stream.stopTime - stream.startTime;\\n  }\\n\\n  struct BalanceOfLocalVars {\\n    uint256 recipientBalance;\\n    uint256 withdrawalAmount;\\n    uint256 senderBalance;\\n  }\\n\\n  /**\\n   * @notice Returns the available funds for the given stream id and address.\\n   * @dev Throws if the id does not point to a valid stream.\\n   * @param streamId The id of the stream for which to query the balance.\\n   * @param who The address for which to query the balance.\\n   * @notice Returns the total funds allocated to `who` as uint256.\\n   */\\n  function balanceOf(uint256 streamId, address who)\\n    public\\n    view\\n    streamExists(streamId)\\n    returns (uint256 balance)\\n  {\\n    Stream memory stream = _streams[streamId];\\n    BalanceOfLocalVars memory vars;\\n\\n    uint256 delta = deltaOf(streamId);\\n    vars.recipientBalance = delta * stream.ratePerSecond;\\n\\n    /*\\n     * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\n     * We have to subtract the total amount withdrawn from the amount of money that has been\\n     * streamed until now.\\n     */\\n    if (stream.deposit > stream.remainingBalance) {\\n      vars.withdrawalAmount = stream.deposit - stream.remainingBalance;\\n      vars.recipientBalance = vars.recipientBalance - vars.withdrawalAmount;\\n    }\\n\\n    if (who == stream.recipient) return vars.recipientBalance;\\n    if (who == stream.sender) {\\n      vars.senderBalance = stream.remainingBalance - vars.recipientBalance;\\n      return vars.senderBalance;\\n    }\\n    return 0;\\n  }\\n\\n  /*** Public Effects & Interactions Functions ***/\\n\\n  struct CreateStreamLocalVars {\\n    uint256 duration;\\n    uint256 ratePerSecond;\\n  }\\n\\n  /**\\n   * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.\\n   * @dev Throws if the recipient is the zero address, the contract itself or the caller.\\n   *  Throws if the deposit is 0.\\n   *  Throws if the start time is before `block.timestamp`.\\n   *  Throws if the stop time is before the start time.\\n   *  Throws if the duration calculation has a math error.\\n   *  Throws if the deposit is smaller than the duration.\\n   *  Throws if the deposit is not a multiple of the duration.\\n   *  Throws if the rate calculation has a math error.\\n   *  Throws if the next stream id calculation has a math error.\\n   *  Throws if the contract is not allowed to transfer enough tokens.\\n   *  Throws if there is a token transfer failure.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param deposit The amount of money to be streamed.\\n   * @param tokenAddress The ERC20 token to use as streaming currency.\\n   * @param startTime The unix timestamp for when the stream starts.\\n   * @param stopTime The unix timestamp for when the stream stops.\\n   * @notice Returns the uint256 id of the newly created stream.\\n   */\\n  function createStream(\\n    address recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external onlyFundsAdmin returns (uint256) {\\n    require(recipient != address(0), 'stream to the zero address');\\n    require(recipient != address(this), 'stream to the contract itself');\\n    require(recipient != msg.sender, 'stream to the caller');\\n    require(deposit > 0, 'deposit is zero');\\n    require(startTime >= block.timestamp, 'start time before block.timestamp');\\n    require(stopTime > startTime, 'stop time before the start time');\\n\\n    CreateStreamLocalVars memory vars;\\n    vars.duration = stopTime - startTime;\\n\\n    /* Without this, the rate per second would be zero. */\\n    require(deposit >= vars.duration, 'deposit smaller than time delta');\\n\\n    /* This condition avoids dealing with remainders */\\n    require(deposit % vars.duration == 0, 'deposit not multiple of time delta');\\n\\n    vars.ratePerSecond = deposit / vars.duration;\\n\\n    /* Create and store the stream object. */\\n    uint256 streamId = _nextStreamId;\\n    _streams[streamId] = Stream({\\n      remainingBalance: deposit,\\n      deposit: deposit,\\n      isEntity: true,\\n      ratePerSecond: vars.ratePerSecond,\\n      recipient: recipient,\\n      sender: address(this),\\n      startTime: startTime,\\n      stopTime: stopTime,\\n      tokenAddress: tokenAddress\\n    });\\n\\n    /* Increment the next stream id. */\\n    _nextStreamId++;\\n\\n    emit CreateStream(\\n      streamId,\\n      address(this),\\n      recipient,\\n      deposit,\\n      tokenAddress,\\n      startTime,\\n      stopTime\\n    );\\n    return streamId;\\n  }\\n\\n  /**\\n   * @notice Withdraws from the contract to the recipient's account.\\n   * @dev Throws if the id does not point to a valid stream.\\n   *  Throws if the caller is not the funds admin or the recipient of the stream.\\n   *  Throws if the amount exceeds the available balance.\\n   *  Throws if there is a token transfer failure.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param amount The amount of tokens to withdraw.\\n   */\\n  function withdrawFromStream(uint256 streamId, uint256 amount)\\n    external\\n    nonReentrant\\n    streamExists(streamId)\\n    onlyAdminOrRecipient(streamId)\\n    returns (bool)\\n  {\\n    require(amount > 0, 'amount is zero');\\n    Stream memory stream = _streams[streamId];\\n\\n    uint256 balance = balanceOf(streamId, stream.recipient);\\n    require(balance >= amount, 'amount exceeds the available balance');\\n\\n    _streams[streamId].remainingBalance = stream.remainingBalance - amount;\\n\\n    if (_streams[streamId].remainingBalance == 0) delete _streams[streamId];\\n\\n    IERC20(stream.tokenAddress).safeTransfer(stream.recipient, amount);\\n    emit WithdrawFromStream(streamId, stream.recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n   * @dev Throws if the id does not point to a valid stream.\\n   *  Throws if the caller is not the funds admin or the recipient of the stream.\\n   *  Throws if there is a token transfer failure.\\n   * @param streamId The id of the stream to cancel.\\n   * @notice Returns bool true=success, otherwise false.\\n   */\\n  function cancelStream(uint256 streamId)\\n    external\\n    nonReentrant\\n    streamExists(streamId)\\n    onlyAdminOrRecipient(streamId)\\n    returns (bool)\\n  {\\n    Stream memory stream = _streams[streamId];\\n    uint256 senderBalance = balanceOf(streamId, stream.sender);\\n    uint256 recipientBalance = balanceOf(streamId, stream.recipient);\\n\\n    delete _streams[streamId];\\n\\n    IERC20 token = IERC20(stream.tokenAddress);\\n    if (recipientBalance > 0) token.safeTransfer(stream.recipient, recipientBalance);\\n\\n    emit CancelStream(streamId, stream.sender, stream.recipient, senderBalance, recipientBalance);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x0221cc9fe61c2dc48730c53c65dfe7ade370b7a0fc483a52b72387ce02212fa6\",\"license\":\"GPL-3.0\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/AdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from '../../../aave-core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IAdminControlledEcosystemReserve} from './interfaces/IAdminControlledEcosystemReserve.sol';\\nimport {VersionedInitializable} from './libs/VersionedInitializable.sol';\\nimport {SafeERC20} from './libs/SafeERC20.sol';\\nimport {ReentrancyGuard} from './libs/ReentrancyGuard.sol';\\nimport {Address} from './libs/Address.sol';\\n\\n/**\\n * @title AdminControlledEcosystemReserve\\n * @notice Stores ERC20 tokens, and allows to dispose of them via approval or transfer dynamics\\n * Adapted to be an implementation of a transparent proxy\\n * @dev Done abstract to add an `initialize()` function on the child, with `initializer` modifier\\n * @author BGD Labs\\n **/\\nabstract contract AdminControlledEcosystemReserve is\\n  VersionedInitializable,\\n  IAdminControlledEcosystemReserve\\n{\\n  using SafeERC20 for IERC20;\\n  using Address for address payable;\\n\\n  address internal _fundsAdmin;\\n\\n  uint256 public constant REVISION = 1;\\n\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\n  address public constant ETH_MOCK_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  modifier onlyFundsAdmin() {\\n    require(msg.sender == _fundsAdmin, 'ONLY_BY_FUNDS_ADMIN');\\n    _;\\n  }\\n\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\n  function getFundsAdmin() external view returns (address) {\\n    return _fundsAdmin;\\n  }\\n\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\n  function approve(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyFundsAdmin {\\n    token.safeApprove(recipient, amount);\\n  }\\n\\n  /// @inheritdoc IAdminControlledEcosystemReserve\\n  function transfer(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyFundsAdmin {\\n    require(recipient != address(0), 'INVALID_0X_RECIPIENT');\\n\\n    if (address(token) == ETH_MOCK_ADDRESS) {\\n      payable(recipient).sendValue(amount);\\n    } else {\\n      token.safeTransfer(recipient, amount);\\n    }\\n  }\\n\\n  /// @dev needed in order to receive ETH from the Aave v1 ecosystem reserve\\n  receive() external payable {}\\n\\n  function _setFundsAdmin(address admin) internal {\\n    _fundsAdmin = admin;\\n    emit NewFundsAdmin(admin);\\n  }\\n}\\n\",\"keccak256\":\"0xd4c33fb8c95230a07d93254274a37f521e56de0a3089fc532234bad33a7c0c1c\",\"license\":\"GPL-3.0\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/interfaces/IAdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from '../../../../aave-core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\n\\ninterface IAdminControlledEcosystemReserve {\\n  /** @notice Emitted when the funds admin changes\\n   * @param fundsAdmin The new funds admin\\n   **/\\n  event NewFundsAdmin(address indexed fundsAdmin);\\n\\n  /** @notice Returns the mock ETH reference address\\n   * @return address The address\\n   **/\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\n\\n  /**\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\n   * @return address The address of the funds admin\\n   **/\\n  function getFundsAdmin() external view returns (address);\\n\\n  /**\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\n   * @param token The address of the token to give allowance from\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\n   * @param token The address of the token to transfer\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    IERC20 token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0xac7cb18204a12d94637534cf5b05119e2a7fb2e8c1e550819e5ddeb07ed75c0a\",\"license\":\"GPL-3.0\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/interfaces/IStreamable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStreamable {\\n  struct Stream {\\n    uint256 deposit;\\n    uint256 ratePerSecond;\\n    uint256 remainingBalance;\\n    uint256 startTime;\\n    uint256 stopTime;\\n    address recipient;\\n    address sender;\\n    address tokenAddress;\\n    bool isEntity;\\n  }\\n\\n  event CreateStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  );\\n\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n  event CancelStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 senderBalance,\\n    uint256 recipientBalance\\n  );\\n\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n  function getStream(uint256 streamId)\\n    external\\n    view\\n    returns (\\n      address sender,\\n      address recipient,\\n      uint256 deposit,\\n      address token,\\n      uint256 startTime,\\n      uint256 stopTime,\\n      uint256 remainingBalance,\\n      uint256 ratePerSecond\\n    );\\n\\n  function createStream(\\n    address recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256 streamId);\\n\\n  function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\n\\n  function cancelStream(uint256 streamId) external returns (bool);\\n\\n  function initialize(address fundsAdmin) external;\\n}\\n\",\"keccak256\":\"0x297162341eba9a0561152bbb952992798d68094c91107949d59f6803136eb32c\",\"license\":\"MIT\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5d46e52cb7914d16d80db123b88f0f54598a959a8ca94913a9d956bf14fd7730\",\"license\":\"MIT\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/libs/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor() {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x23927cd1bf798f64d7aca4ea6e045c497ac4c63cfacafa3c48537bae2f1606e1\",\"license\":\"MIT\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../../../../aave-core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {Address} from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, 'SafeERC20: decreased allowance below zero');\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc7d2a8190a8025a4d1666e617a0d5c280050da2d5c5562cb2637179d97b30ef8\",\"license\":\"MIT\"},\"contracts/lend/aave-periphery-v3/contracts/treasury/libs/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x2211858d472a0e26994d6f1fa179cb01fb4e69e3b5e23af4937fa342b784f543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805534801561001457600080fd5b506001603455611ddc806100296000396000f3fe6080604052600436106100d65760003560e01c8063894e9a0d1161007f578063c4d66de811610059578063c4d66de81461027d578063cc1b4bf61461029d578063dde43cba146102bd578063e1f21c67146102d257600080fd5b8063894e9a0d146101d0578063a82ccd4d1461023b578063beabacc81461025b57600080fd5b806351ee886b116100b057806351ee886b146101585780636db9241b146101805780637a9b2c6c146101b057600080fd5b806306bc2ee0146100e25780630932f92b146101195780633656eec21461013857600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012557600080fd5b506035545b604051908152602001610110565b34801561014457600080fd5b5061012a610153366004611b40565b6102f2565b34801561016457600080fd5b506100fc73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561018c57600080fd5b506101a061019b366004611b70565b6104c5565b6040519015158152602001610110565b3480156101bc57600080fd5b506101a06101cb366004611b89565b6107e8565b3480156101dc57600080fd5b506101f06101eb366004611b70565b610bd0565b604080516001600160a01b03998a1681529789166020890152870195909552959092166060850152608084015260a083015260c082019290925260e081019190915261010001610110565b34801561024757600080fd5b5061012a610256366004611b70565b610ca1565b34801561026757600080fd5b5061027b610276366004611bab565b610de4565b005b34801561028957600080fd5b5061027b610298366004611bec565b610ef0565b3480156102a957600080fd5b5061012a6102b8366004611c09565b610f83565b3480156102c957600080fd5b5061012a600181565b3480156102de57600080fd5b5061027b6102ed366004611bab565b6114d4565b6000828152603660205260408120600701548390600160a01b900460ff166103595760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064015b60405180910390fd5b60008481526036602090815260408083208151610120810183528154815260018201548185015260028201548184015260038201546060808301919091526004830154608083015260058301546001600160a01b0390811660a08401526006840154811660c084015260079093015492831660e0830152600160a01b90920460ff161515610100820152825191820183528482529281018490529081019290925290600061040687610ca1565b90508260200151816104189190611c71565b825260408301518351111561044e57604083015183516104389190611c8e565b60208301819052825161044b9190611c8e565b82525b8260a001516001600160a01b0316866001600160a01b03160361047657505192506104be9050565b8260c001516001600160a01b0316866001600160a01b0316036104b657815160408401516104a49190611c8e565b60409092018290525092506104be9050565b600094505050505b5092915050565b60006002603454036105195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610350565b60026034556000828152603660205260409020600701548290600160a01b900460ff166105805760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b60335483906001600160a01b03163314806105b457506000818152603660205260409020600501546001600160a01b031633145b6106265760405162461bcd60e51b815260206004820152603c60248201527f63616c6c6572206973206e6f74207468652066756e64732061646d696e206f7260448201527f2074686520726563697069656e74206f66207468652073747265616d000000006064820152608401610350565b600084815260366020908152604080832081516101208101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006820154811660c0840181905260079092015490811660e0840152600160a01b900460ff1615156101008301529091906106c19087906102f2565b905060006106d3878460a001516102f2565b6000888152603660205260408120818155600181018290556002810182905560038101829055600481019190915560058101805473ffffffffffffffffffffffffffffffffffffffff199081169091556006820180549091169055600701805474ffffffffffffffffffffffffffffffffffffffffff1916905560e084015190915081156107755760a0840151610775906001600160a01b0383169084611542565b8360a001516001600160a01b03168460c001516001600160a01b0316897fca3e6079b726e7728802a0537949e2d1c7762304fa641fb06eb56daf2ba8c6b986866040516107cc929190918252602082015260400190565b60405180910390a4600196505050505050506001603455919050565b600060026034540361083c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610350565b60026034556000838152603660205260409020600701548390600160a01b900460ff166108a35760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b60335484906001600160a01b03163314806108d757506000818152603660205260409020600501546001600160a01b031633145b6109495760405162461bcd60e51b815260206004820152603c60248201527f63616c6c6572206973206e6f74207468652066756e64732061646d696e206f7260448201527f2074686520726563697069656e74206f66207468652073747265616d000000006064820152608401610350565b600084116109995760405162461bcd60e51b815260206004820152600e60248201527f616d6f756e74206973207a65726f0000000000000000000000000000000000006044820152606401610350565b600085815260366020908152604080832081516101208101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a084018190526006830154821660c085015260079092015490811660e0840152600160a01b900460ff161515610100830152909190610a349088906102f2565b905085811015610aab5760405162461bcd60e51b8152602060048201526024808201527f616d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610350565b858260400151610abb9190611c8e565b600088815260366020526040812060020182905503610b4f576000878152603660205260408120818155600181018290556002810182905560038101829055600481019190915560058101805473ffffffffffffffffffffffffffffffffffffffff199081169091556006820180549091169055600701805474ffffffffffffffffffffffffffffffffffffffffff191690555b610b758260a00151878460e001516001600160a01b03166115429092919063ffffffff16565b8160a001516001600160a01b0316877f36c3ab437e6a424ed25dc4bfdeb62706aa06558660fab2dab229d2555adaf89c88604051610bb591815260200190565b60405180910390a36001945050505050600160345592915050565b600080600080600080600080886036600082815260200190815260200160002060070160149054906101000a900460ff16610c455760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b5050506000968752505060366020525050604090922060068101546005820154825460078401546003850154600486015460028701546001909701546001600160a01b039687169a958716995093975091909416949092909190565b6000818152603660205260408120600701548290600160a01b900460ff16610d035760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b600083815260366020908152604091829020825161012081018452815481526001820154928101929092526002810154928201929092526003820154606082018190526004830154608083015260058301546001600160a01b0390811660a08401526006840154811660c084015260079093015492831660e0830152600160a01b90920460ff161515610100820152904211610da3576000925050610dde565b8060800151421015610dc6576060810151610dbe9042611c8e565b925050610dde565b80606001518160800151610dda9190611c8e565b9250505b50919050565b6033546001600160a01b03163314610e3e5760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610350565b6001600160a01b038216610e945760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f30585f524543495049454e540000000000000000000000006044820152606401610350565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601610edc57610ed76001600160a01b038316826115eb565b505050565b610ed76001600160a01b0384168383611542565b6000546001908111610f6a5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610350565b6000819055620186a0603555610f7f82611704565b5050565b6033546000906001600160a01b03163314610fe05760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610350565b6001600160a01b0386166110365760405162461bcd60e51b815260206004820152601a60248201527f73747265616d20746f20746865207a65726f20616464726573730000000000006044820152606401610350565b306001600160a01b0387160361108e5760405162461bcd60e51b815260206004820152601d60248201527f73747265616d20746f2074686520636f6e747261637420697473656c660000006044820152606401610350565b336001600160a01b038716036110e65760405162461bcd60e51b815260206004820152601460248201527f73747265616d20746f207468652063616c6c65720000000000000000000000006044820152606401610350565b600085116111365760405162461bcd60e51b815260206004820152600f60248201527f6465706f736974206973207a65726f00000000000000000000000000000000006044820152606401610350565b428310156111ac5760405162461bcd60e51b815260206004820152602160248201527f73746172742074696d65206265666f726520626c6f636b2e74696d657374616d60448201527f70000000000000000000000000000000000000000000000000000000000000006064820152608401610350565b8282116111fb5760405162461bcd60e51b815260206004820152601f60248201527f73746f702074696d65206265666f7265207468652073746172742074696d65006044820152606401610350565b60408051808201909152600080825260208201526112198484611c8e565b80825286101561126b5760405162461bcd60e51b815260206004820152601f60248201527f6465706f73697420736d616c6c6572207468616e2074696d652064656c7461006044820152606401610350565b80516112779087611cb7565b156112ea5760405162461bcd60e51b815260206004820152602260248201527f6465706f736974206e6f74206d756c7469706c65206f662074696d652064656c60448201527f74610000000000000000000000000000000000000000000000000000000000006064820152608401610350565b80516112f69087611ccb565b8160200181815250506000603554905060405180610120016040528088815260200183602001518152602001888152602001868152602001858152602001896001600160a01b03168152602001306001600160a01b03168152602001876001600160a01b031681526020016001151581525060366000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070160146101000a81548160ff0219169083151502179055509050506035600081548092919061146b90611cdf565b9091555050604080518881526001600160a01b0388811660208301529181018790526060810186905290891690309083907f7b01d409597969366dc268d7f957a990d1ca3d3449baf8fb45db67351aecfe789060800160405180910390a4979650505050505050565b6033546001600160a01b0316331461152e5760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610350565b610ed76001600160a01b038416838361175b565b6040516001600160a01b038316602482015260448101829052610ed79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118a9565b8047101561163b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610350565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611688576040519150601f19603f3d011682016040523d82523d6000602084013e61168d565b606091505b5050905080610ed75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610350565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f1ab77a654795da4cfe37c33188e862203ade9a5c7f1a9d4957669b3ccbec9e1190600090a250565b8015806117ee57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190611cf8565b155b6118605760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610350565b6040516001600160a01b038316602482015260448101829052610ed79084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611587565b60006118fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661198e9092919063ffffffff16565b805190915015610ed7578080602001905181019061191c9190611d11565b610ed75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610350565b606061199d84846000856119a7565b90505b9392505050565b606082471015611a1f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610350565b6001600160a01b0385163b611a765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610350565b600080866001600160a01b03168587604051611a929190611d57565b60006040518083038185875af1925050503d8060008114611acf576040519150601f19603f3d011682016040523d82523d6000602084013e611ad4565b606091505b5091509150611ae4828286611aef565b979650505050505050565b60608315611afe5750816119a0565b825115611b0e5782518084602001fd5b8160405162461bcd60e51b81526004016103509190611d73565b6001600160a01b0381168114611b3d57600080fd5b50565b60008060408385031215611b5357600080fd5b823591506020830135611b6581611b28565b809150509250929050565b600060208284031215611b8257600080fd5b5035919050565b60008060408385031215611b9c57600080fd5b50508035926020909101359150565b600080600060608486031215611bc057600080fd5b8335611bcb81611b28565b92506020840135611bdb81611b28565b929592945050506040919091013590565b600060208284031215611bfe57600080fd5b81356119a081611b28565b600080600080600060a08688031215611c2157600080fd5b8535611c2c81611b28565b9450602086013593506040860135611c4381611b28565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611c8857611c88611c5b565b92915050565b81810381811115611c8857611c88611c5b565b634e487b7160e01b600052601260045260246000fd5b600082611cc657611cc6611ca1565b500690565b600082611cda57611cda611ca1565b500490565b600060018201611cf157611cf1611c5b565b5060010190565b600060208284031215611d0a57600080fd5b5051919050565b600060208284031215611d2357600080fd5b815180151581146119a057600080fd5b60005b83811015611d4e578181015183820152602001611d36565b50506000910152565b60008251611d69818460208701611d33565b9190910192915050565b6020815260008251806020840152611d92816040850160208701611d33565b601f01601f1916919091016040019291505056fea2646970667358221220bf59790349198ad67f69fb03831db0a931d585c7149b2d61289777032b3662e464736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c8063894e9a0d1161007f578063c4d66de811610059578063c4d66de81461027d578063cc1b4bf61461029d578063dde43cba146102bd578063e1f21c67146102d257600080fd5b8063894e9a0d146101d0578063a82ccd4d1461023b578063beabacc81461025b57600080fd5b806351ee886b116100b057806351ee886b146101585780636db9241b146101805780637a9b2c6c146101b057600080fd5b806306bc2ee0146100e25780630932f92b146101195780633656eec21461013857600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012557600080fd5b506035545b604051908152602001610110565b34801561014457600080fd5b5061012a610153366004611b40565b6102f2565b34801561016457600080fd5b506100fc73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561018c57600080fd5b506101a061019b366004611b70565b6104c5565b6040519015158152602001610110565b3480156101bc57600080fd5b506101a06101cb366004611b89565b6107e8565b3480156101dc57600080fd5b506101f06101eb366004611b70565b610bd0565b604080516001600160a01b03998a1681529789166020890152870195909552959092166060850152608084015260a083015260c082019290925260e081019190915261010001610110565b34801561024757600080fd5b5061012a610256366004611b70565b610ca1565b34801561026757600080fd5b5061027b610276366004611bab565b610de4565b005b34801561028957600080fd5b5061027b610298366004611bec565b610ef0565b3480156102a957600080fd5b5061012a6102b8366004611c09565b610f83565b3480156102c957600080fd5b5061012a600181565b3480156102de57600080fd5b5061027b6102ed366004611bab565b6114d4565b6000828152603660205260408120600701548390600160a01b900460ff166103595760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064015b60405180910390fd5b60008481526036602090815260408083208151610120810183528154815260018201548185015260028201548184015260038201546060808301919091526004830154608083015260058301546001600160a01b0390811660a08401526006840154811660c084015260079093015492831660e0830152600160a01b90920460ff161515610100820152825191820183528482529281018490529081019290925290600061040687610ca1565b90508260200151816104189190611c71565b825260408301518351111561044e57604083015183516104389190611c8e565b60208301819052825161044b9190611c8e565b82525b8260a001516001600160a01b0316866001600160a01b03160361047657505192506104be9050565b8260c001516001600160a01b0316866001600160a01b0316036104b657815160408401516104a49190611c8e565b60409092018290525092506104be9050565b600094505050505b5092915050565b60006002603454036105195760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610350565b60026034556000828152603660205260409020600701548290600160a01b900460ff166105805760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b60335483906001600160a01b03163314806105b457506000818152603660205260409020600501546001600160a01b031633145b6106265760405162461bcd60e51b815260206004820152603c60248201527f63616c6c6572206973206e6f74207468652066756e64732061646d696e206f7260448201527f2074686520726563697069656e74206f66207468652073747265616d000000006064820152608401610350565b600084815260366020908152604080832081516101208101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006820154811660c0840181905260079092015490811660e0840152600160a01b900460ff1615156101008301529091906106c19087906102f2565b905060006106d3878460a001516102f2565b6000888152603660205260408120818155600181018290556002810182905560038101829055600481019190915560058101805473ffffffffffffffffffffffffffffffffffffffff199081169091556006820180549091169055600701805474ffffffffffffffffffffffffffffffffffffffffff1916905560e084015190915081156107755760a0840151610775906001600160a01b0383169084611542565b8360a001516001600160a01b03168460c001516001600160a01b0316897fca3e6079b726e7728802a0537949e2d1c7762304fa641fb06eb56daf2ba8c6b986866040516107cc929190918252602082015260400190565b60405180910390a4600196505050505050506001603455919050565b600060026034540361083c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610350565b60026034556000838152603660205260409020600701548390600160a01b900460ff166108a35760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b60335484906001600160a01b03163314806108d757506000818152603660205260409020600501546001600160a01b031633145b6109495760405162461bcd60e51b815260206004820152603c60248201527f63616c6c6572206973206e6f74207468652066756e64732061646d696e206f7260448201527f2074686520726563697069656e74206f66207468652073747265616d000000006064820152608401610350565b600084116109995760405162461bcd60e51b815260206004820152600e60248201527f616d6f756e74206973207a65726f0000000000000000000000000000000000006044820152606401610350565b600085815260366020908152604080832081516101208101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b0390811660a084018190526006830154821660c085015260079092015490811660e0840152600160a01b900460ff161515610100830152909190610a349088906102f2565b905085811015610aab5760405162461bcd60e51b8152602060048201526024808201527f616d6f756e7420657863656564732074686520617661696c61626c652062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610350565b858260400151610abb9190611c8e565b600088815260366020526040812060020182905503610b4f576000878152603660205260408120818155600181018290556002810182905560038101829055600481019190915560058101805473ffffffffffffffffffffffffffffffffffffffff199081169091556006820180549091169055600701805474ffffffffffffffffffffffffffffffffffffffffff191690555b610b758260a00151878460e001516001600160a01b03166115429092919063ffffffff16565b8160a001516001600160a01b0316877f36c3ab437e6a424ed25dc4bfdeb62706aa06558660fab2dab229d2555adaf89c88604051610bb591815260200190565b60405180910390a36001945050505050600160345592915050565b600080600080600080600080886036600082815260200190815260200160002060070160149054906101000a900460ff16610c455760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b5050506000968752505060366020525050604090922060068101546005820154825460078401546003850154600486015460028701546001909701546001600160a01b039687169a958716995093975091909416949092909190565b6000818152603660205260408120600701548290600160a01b900460ff16610d035760405162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610350565b600083815260366020908152604091829020825161012081018452815481526001820154928101929092526002810154928201929092526003820154606082018190526004830154608083015260058301546001600160a01b0390811660a08401526006840154811660c084015260079093015492831660e0830152600160a01b90920460ff161515610100820152904211610da3576000925050610dde565b8060800151421015610dc6576060810151610dbe9042611c8e565b925050610dde565b80606001518160800151610dda9190611c8e565b9250505b50919050565b6033546001600160a01b03163314610e3e5760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610350565b6001600160a01b038216610e945760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f30585f524543495049454e540000000000000000000000006044820152606401610350565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601610edc57610ed76001600160a01b038316826115eb565b505050565b610ed76001600160a01b0384168383611542565b6000546001908111610f6a5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610350565b6000819055620186a0603555610f7f82611704565b5050565b6033546000906001600160a01b03163314610fe05760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610350565b6001600160a01b0386166110365760405162461bcd60e51b815260206004820152601a60248201527f73747265616d20746f20746865207a65726f20616464726573730000000000006044820152606401610350565b306001600160a01b0387160361108e5760405162461bcd60e51b815260206004820152601d60248201527f73747265616d20746f2074686520636f6e747261637420697473656c660000006044820152606401610350565b336001600160a01b038716036110e65760405162461bcd60e51b815260206004820152601460248201527f73747265616d20746f207468652063616c6c65720000000000000000000000006044820152606401610350565b600085116111365760405162461bcd60e51b815260206004820152600f60248201527f6465706f736974206973207a65726f00000000000000000000000000000000006044820152606401610350565b428310156111ac5760405162461bcd60e51b815260206004820152602160248201527f73746172742074696d65206265666f726520626c6f636b2e74696d657374616d60448201527f70000000000000000000000000000000000000000000000000000000000000006064820152608401610350565b8282116111fb5760405162461bcd60e51b815260206004820152601f60248201527f73746f702074696d65206265666f7265207468652073746172742074696d65006044820152606401610350565b60408051808201909152600080825260208201526112198484611c8e565b80825286101561126b5760405162461bcd60e51b815260206004820152601f60248201527f6465706f73697420736d616c6c6572207468616e2074696d652064656c7461006044820152606401610350565b80516112779087611cb7565b156112ea5760405162461bcd60e51b815260206004820152602260248201527f6465706f736974206e6f74206d756c7469706c65206f662074696d652064656c60448201527f74610000000000000000000000000000000000000000000000000000000000006064820152608401610350565b80516112f69087611ccb565b8160200181815250506000603554905060405180610120016040528088815260200183602001518152602001888152602001868152602001858152602001896001600160a01b03168152602001306001600160a01b03168152602001876001600160a01b031681526020016001151581525060366000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070160146101000a81548160ff0219169083151502179055509050506035600081548092919061146b90611cdf565b9091555050604080518881526001600160a01b0388811660208301529181018790526060810186905290891690309083907f7b01d409597969366dc268d7f957a990d1ca3d3449baf8fb45db67351aecfe789060800160405180910390a4979650505050505050565b6033546001600160a01b0316331461152e5760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610350565b610ed76001600160a01b038416838361175b565b6040516001600160a01b038316602482015260448101829052610ed79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118a9565b8047101561163b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610350565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611688576040519150601f19603f3d011682016040523d82523d6000602084013e61168d565b606091505b5050905080610ed75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610350565b6033805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f1ab77a654795da4cfe37c33188e862203ade9a5c7f1a9d4957669b3ccbec9e1190600090a250565b8015806117ee57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190611cf8565b155b6118605760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610350565b6040516001600160a01b038316602482015260448101829052610ed79084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611587565b60006118fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661198e9092919063ffffffff16565b805190915015610ed7578080602001905181019061191c9190611d11565b610ed75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610350565b606061199d84846000856119a7565b90505b9392505050565b606082471015611a1f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610350565b6001600160a01b0385163b611a765760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610350565b600080866001600160a01b03168587604051611a929190611d57565b60006040518083038185875af1925050503d8060008114611acf576040519150601f19603f3d011682016040523d82523d6000602084013e611ad4565b606091505b5091509150611ae4828286611aef565b979650505050505050565b60608315611afe5750816119a0565b825115611b0e5782518084602001fd5b8160405162461bcd60e51b81526004016103509190611d73565b6001600160a01b0381168114611b3d57600080fd5b50565b60008060408385031215611b5357600080fd5b823591506020830135611b6581611b28565b809150509250929050565b600060208284031215611b8257600080fd5b5035919050565b60008060408385031215611b9c57600080fd5b50508035926020909101359150565b600080600060608486031215611bc057600080fd5b8335611bcb81611b28565b92506020840135611bdb81611b28565b929592945050506040919091013590565b600060208284031215611bfe57600080fd5b81356119a081611b28565b600080600080600060a08688031215611c2157600080fd5b8535611c2c81611b28565b9450602086013593506040860135611c4381611b28565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417611c8857611c88611c5b565b92915050565b81810381811115611c8857611c88611c5b565b634e487b7160e01b600052601260045260246000fd5b600082611cc657611cc6611ca1565b500690565b600082611cda57611cda611ca1565b500490565b600060018201611cf157611cf1611c5b565b5060010190565b600060208284031215611d0a57600080fd5b5051919050565b600060208284031215611d2357600080fd5b815180151581146119a057600080fd5b60005b83811015611d4e578181015183820152602001611d36565b50506000910152565b60008251611d69818460208701611d33565b9190910192915050565b6020815260008251806020840152611d92816040850160208701611d33565b601f01601f1916919091016040019291505056fea2646970667358221220bf59790349198ad67f69fb03831db0a931d585c7149b2d61289777032b3662e464736f6c63430008130033",
  "devdoc": {
    "author": "BGD Labs*",
    "events": {
      "NewFundsAdmin(address)": {
        "params": {
          "fundsAdmin": "The new funds admin*"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,address,uint256)": {
        "details": "Function for the funds admin to give ERC20 allowance to other parties",
        "params": {
          "amount": "Allowance to approve*",
          "recipient": "Allowance's recipient",
          "token": "The address of the token to give allowance from"
        }
      },
      "balanceOf(uint256,address)": {
        "details": "Throws if the id does not point to a valid stream.",
        "params": {
          "streamId": "The id of the stream for which to query the balance.",
          "who": "The address for which to query the balance."
        }
      },
      "cancelStream(uint256)": {
        "details": "Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if there is a token transfer failure.",
        "params": {
          "streamId": "The id of the stream to cancel."
        }
      },
      "createStream(address,uint256,address,uint256,uint256)": {
        "details": "Throws if the recipient is the zero address, the contract itself or the caller.  Throws if the deposit is 0.  Throws if the start time is before `block.timestamp`.  Throws if the stop time is before the start time.  Throws if the duration calculation has a math error.  Throws if the deposit is smaller than the duration.  Throws if the deposit is not a multiple of the duration.  Throws if the rate calculation has a math error.  Throws if the next stream id calculation has a math error.  Throws if the contract is not allowed to transfer enough tokens.  Throws if there is a token transfer failure.",
        "params": {
          "deposit": "The amount of money to be streamed.",
          "recipient": "The address towards which the money is streamed.",
          "startTime": "The unix timestamp for when the stream starts.",
          "stopTime": "The unix timestamp for when the stream stops.",
          "tokenAddress": "The ERC20 token to use as streaming currency."
        }
      },
      "deltaOf(uint256)": {
        "details": "Throws if the id does not point to a valid stream.",
        "params": {
          "streamId": "The id of the stream for which to query the delta."
        }
      },
      "getFundsAdmin()": {
        "returns": {
          "_0": "address The address of the funds admin*"
        }
      },
      "getStream(uint256)": {
        "details": "Throws if the id does not point to a valid stream.",
        "params": {
          "streamId": "The id of the stream to query."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Amount to transfer*",
          "recipient": "Transfer's recipient",
          "token": "The address of the token to transfer"
        }
      },
      "withdrawFromStream(uint256,uint256)": {
        "details": "Throws if the id does not point to a valid stream.  Throws if the caller is not the funds admin or the recipient of the stream.  Throws if the amount exceeds the available balance.  Throws if there is a token transfer failure.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "streamId": "The id of the stream to withdraw tokens from."
        }
      }
    },
    "title": "AaveEcosystemReserve v2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewFundsAdmin(address)": {
        "notice": "Emitted when the funds admin changes"
      }
    },
    "kind": "user",
    "methods": {
      "ETH_MOCK_ADDRESS()": {
        "notice": "Returns the mock ETH reference address"
      },
      "balanceOf(uint256,address)": {
        "notice": "Returns the available funds for the given stream id and address.Returns the total funds allocated to `who` as uint256."
      },
      "cancelStream(uint256)": {
        "notice": "Cancels the stream and transfers the tokens back on a pro rata basis.Returns bool true=success, otherwise false."
      },
      "createStream(address,uint256,address,uint256,uint256)": {
        "notice": "Creates a new stream funded by this contracts itself and paid towards `recipient`.Returns the uint256 id of the newly created stream."
      },
      "deltaOf(uint256)": {
        "notice": "Returns either the delta in seconds between `block.timestamp` and `startTime` or  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before  `startTime`, it returns 0.Returns the time delta in seconds."
      },
      "getFundsAdmin()": {
        "notice": "Return the funds admin, only entity to be able to interact with this contract (controller of reserve)"
      },
      "getNextStreamId()": {
        "notice": "Returns the next available stream idReturns the stream id."
      },
      "getStream(uint256)": {
        "notice": "Returns the stream with all its properties.Returns the stream object."
      },
      "transfer(address,address,uint256)": {
        "notice": "Function for the funds admin to transfer ERC20 tokens to other parties"
      },
      "withdrawFromStream(uint256,uint256)": {
        "notice": "Withdraws from the contract to the recipient's account."
      }
    },
    "notice": "Stores ERC20 tokens of an ecosystem reserve, adding streaming capabilities. Modification of Sablier https://github.com/sablierhq/sablier/blob/develop/packages/protocol/contracts/Sablier.sol Original can be found also deployed on https://etherscan.io/address/0xCD18eAa163733Da39c232722cBC4E8940b1D8888 Modifications: - Sablier \"pulls\" the funds from the creator of the stream at creation. In the Aave case, we already have the funds. - Anybody can create streams on Sablier. Here, only the funds admin (Aave governance via controller) can - Adapted codebase to Solidity 0.8.11, mainly removing SafeMath and CarefulMath to use native safe math - Same as with creation, on Sablier the `sender` and `recipient` can cancel a stream. Here, only fund admin and recipient",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11402,
        "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11433,
        "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10417,
        "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
        "label": "_fundsAdmin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 11140,
        "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
        "label": "_status",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 9768,
        "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
        "label": "_nextStreamId",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 9774,
        "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
        "label": "_streams",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_struct(Stream)10731_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Stream)10731_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStreamable.Stream)",
        "numberOfBytes": "32",
        "value": "t_struct(Stream)10731_storage"
      },
      "t_struct(Stream)10731_storage": {
        "encoding": "inplace",
        "label": "struct IStreamable.Stream",
        "members": [
          {
            "astId": 10714,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10716,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "ratePerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10718,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "remainingBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10720,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10722,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "stopTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10724,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 10726,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "sender",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 10728,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 10730,
            "contract": "contracts/lend/aave-periphery-v3/contracts/treasury/AaveEcosystemReserveV2.sol:AaveEcosystemReserveV2",
            "label": "isEntity",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}